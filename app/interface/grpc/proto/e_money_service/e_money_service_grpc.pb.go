// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package e_money_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// BillerServiceClient is the client API for BillerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BillerServiceClient interface {
	ListBiller(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BillerResponse, error)
	DetailBiller(ctx context.Context, in *BillerRequest, opts ...grpc.CallOption) (*Biller, error)
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error)
	CreateEMoney(ctx context.Context, in *CreateEMoneyRequest, opts ...grpc.CallOption) (*CreateEMoneyResponse, error)
	GetTrxHist(ctx context.Context, in *GetTrxHistReq, opts ...grpc.CallOption) (*GetTrxHistResponse, error)
}

type billerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBillerServiceClient(cc grpc.ClientConnInterface) BillerServiceClient {
	return &billerServiceClient{cc}
}

func (c *billerServiceClient) ListBiller(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*BillerResponse, error) {
	out := new(BillerResponse)
	err := c.cc.Invoke(ctx, "/e_money_service.BillerService/ListBiller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billerServiceClient) DetailBiller(ctx context.Context, in *BillerRequest, opts ...grpc.CallOption) (*Biller, error) {
	out := new(Biller)
	err := c.cc.Invoke(ctx, "/e_money_service.BillerService/DetailBiller", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billerServiceClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceResponse, error) {
	out := new(GetBalanceResponse)
	err := c.cc.Invoke(ctx, "/e_money_service.BillerService/GetBalance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billerServiceClient) CreateEMoney(ctx context.Context, in *CreateEMoneyRequest, opts ...grpc.CallOption) (*CreateEMoneyResponse, error) {
	out := new(CreateEMoneyResponse)
	err := c.cc.Invoke(ctx, "/e_money_service.BillerService/CreateEMoney", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *billerServiceClient) GetTrxHist(ctx context.Context, in *GetTrxHistReq, opts ...grpc.CallOption) (*GetTrxHistResponse, error) {
	out := new(GetTrxHistResponse)
	err := c.cc.Invoke(ctx, "/e_money_service.BillerService/GetTrxHist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BillerServiceServer is the server API for BillerService service.
// All implementations should embed UnimplementedBillerServiceServer
// for forward compatibility
type BillerServiceServer interface {
	ListBiller(context.Context, *emptypb.Empty) (*BillerResponse, error)
	DetailBiller(context.Context, *BillerRequest) (*Biller, error)
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error)
	CreateEMoney(context.Context, *CreateEMoneyRequest) (*CreateEMoneyResponse, error)
	GetTrxHist(context.Context, *GetTrxHistReq) (*GetTrxHistResponse, error)
}

// UnimplementedBillerServiceServer should be embedded to have forward compatible implementations.
type UnimplementedBillerServiceServer struct {
}

func (UnimplementedBillerServiceServer) ListBiller(context.Context, *emptypb.Empty) (*BillerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBiller not implemented")
}
func (UnimplementedBillerServiceServer) DetailBiller(context.Context, *BillerRequest) (*Biller, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DetailBiller not implemented")
}
func (UnimplementedBillerServiceServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedBillerServiceServer) CreateEMoney(context.Context, *CreateEMoneyRequest) (*CreateEMoneyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEMoney not implemented")
}
func (UnimplementedBillerServiceServer) GetTrxHist(context.Context, *GetTrxHistReq) (*GetTrxHistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrxHist not implemented")
}

// UnsafeBillerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BillerServiceServer will
// result in compilation errors.
type UnsafeBillerServiceServer interface {
	mustEmbedUnimplementedBillerServiceServer()
}

func RegisterBillerServiceServer(s grpc.ServiceRegistrar, srv BillerServiceServer) {
	s.RegisterService(&_BillerService_serviceDesc, srv)
}

func _BillerService_ListBiller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillerServiceServer).ListBiller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e_money_service.BillerService/ListBiller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillerServiceServer).ListBiller(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillerService_DetailBiller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BillerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillerServiceServer).DetailBiller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e_money_service.BillerService/DetailBiller",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillerServiceServer).DetailBiller(ctx, req.(*BillerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillerService_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillerServiceServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e_money_service.BillerService/GetBalance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillerServiceServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillerService_CreateEMoney_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateEMoneyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillerServiceServer).CreateEMoney(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e_money_service.BillerService/CreateEMoney",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillerServiceServer).CreateEMoney(ctx, req.(*CreateEMoneyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BillerService_GetTrxHist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTrxHistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BillerServiceServer).GetTrxHist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/e_money_service.BillerService/GetTrxHist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BillerServiceServer).GetTrxHist(ctx, req.(*GetTrxHistReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _BillerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "e_money_service.BillerService",
	HandlerType: (*BillerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBiller",
			Handler:    _BillerService_ListBiller_Handler,
		},
		{
			MethodName: "DetailBiller",
			Handler:    _BillerService_DetailBiller_Handler,
		},
		{
			MethodName: "GetBalance",
			Handler:    _BillerService_GetBalance_Handler,
		},
		{
			MethodName: "CreateEMoney",
			Handler:    _BillerService_CreateEMoney_Handler,
		},
		{
			MethodName: "GetTrxHist",
			Handler:    _BillerService_GetTrxHist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "e_money_service.proto",
}
